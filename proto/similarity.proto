syntax = 'proto3';

// Keep all of these within the 'kmermidon' namespace
package kmermidon;

message Comparison {
    // Name of sample 2
    string name1 = 1;

    // Name of sample 1
    string name2 = 2;

    // Input filename for creating the signature
    string filename = 3;

    // Version of hash function used to generate hash values,
    // e.g. '0.murmur64'
    string hash_function = 4;

    // How this signature can be shared, e.g. 'CC0'
    string license = 5;

    // List of similarity scores at different k-mer and sketch sizes, or
    // molecules
    repeated Similarity similarities = 6;

    // Type of signature, e.g. 'sourmash_signature'
    string class = 7;

    // Version of signature, e.g. '0.1'
    string version = 8;
}

message Similarity {
    // k-mer size used to grab signatures and generate hashes
    int ksize = 1;

    // Which molecule was used, either DNA or protein
    Molecule molecule = 2;

    // Number of hashes used in this comparison
    int num_hashes = 3;

    // Random seed used to generate hashes
    int seed = 4;

    // Maximum hash value
    int max_hash = 5;

    // Uniquely identifiable string ID of the signature
    string md5sum = 6;

    // Estimated Jaccard similarity between samples at this 
    // number of hashes, molecule and ksize
    float similarity_score = 7;

    // Type of simlarity, e.g. "minhash", "hyperloglog" or "exactjaccard"
    Method method = 8;
}


enum Molecule {
    DNA = 0;
    PROTEIN = 1;
}


enum Method {
    MINHASH = 0;
    HYPERLOGLOG = 1;
    EXACTJACCARD = 2;
}

