
param (
    // Full s3 file location to put the output comparison
    output string

    // Either signatures_dir or signatures_files must be specified
    // S3 path to directory containing computed signatures
    sketches_dir = "empty"

    // S3 path to pipe-separated singature files
    sketches_files = "empty"

    // Size of kmer to use (can only use one for comparison)
    ksize = 21

    // GiB of memory for compare 
    // For > 100 samples, increase
    memory = 8

    // If true, estimate the distances between sketches. 
    // True "ground truth" distance takes ~2-5x longer
    // Only change to false for benchmarking small datasets
    estimation = true

    // Number of processes to use for comparison
    threads = 16
)


val files = make("$/files")
val strings = make("$/strings")
val dirs = make("$/dirs")

val dashing = make("./dashing.rf")



sketches := if sketches_files != "empty" {
  sketches := strings.Split(sketches_files, "|")
  v := trace(sketches)
  sketches_files := [file(sketch) | sketch <- sketches]
  sketches_files
} else {
  if sketches_dir != "empty" {
    dirs.Files(dir(sketches_dir))
  } else {
    panic("one of sketches_dir or sketches_files has to be specified")
  }
}


val comparison = if estimation {
        dashing.Dist(sketches, threads)
    } else {
        dashing.SetDist(sketches, threads)
    }

val Main = files.Copy(comparison, output)
