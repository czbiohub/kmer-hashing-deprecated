
param (
    // Full s3 file location to put the output comparison
    output string

    // S3 path to directory containing computed signatures
    signatures_dir = "empty"

    // S3 path to pipe-separated singature files
    signatures_files = "empty"

    // Size of kmer to use (can only use one for comparison)
    ksize = 21

    // What to compare, could be either "protein" or "dna"
    molecule = "dna"

    // Whether or not to include the abundance of kmers in the comparison
    ignore_abundance = false
)


val kmer_hashing = "czbiohub/kmer-hashing"

// Instantiate the system modules "files" (system modules begin
// with $), assigning its instance to the "files" identifier. To
// view the documentation for this module, run "reflow doc
// $/files".
val files = make("$/files")


// Instantiate system module "strings"
val strings = make("$/strings")

val dirs = make("$/dirs")


// Compute a minhash signature for a sample
// ubuntu@olgabot-reflow î‚° sourmash compare --help
// usage: sourmash [-h] [-o OUTPUT] [--ignore-abundance] [-k KSIZE] [--protein]
//                 [--no-protein] [--dna] [--no-dna] [--csv CSV] [-q]
//                 signatures [signatures ...]

// positional arguments:
//   signatures            list of signatures

// optional arguments:
//   -h, --help            show this help message and exit
//   -o OUTPUT, --output OUTPUT
//   --ignore-abundance    do NOT use k-mer abundances if present
//   -k KSIZE, --ksize KSIZE
//                         k-mer size (default: 31)
//   --protein             choose a protein signature (default: False)
//   --no-protein          do not choose a protein signature
//   --dna                 choose a DNA signature (default: True)
//   --no-dna              do not choose a DNA signature
//   --csv CSV             save matrix in CSV format (with column headers)
//   -q, --quiet           suppress non-error output
func Compare(signatures [file], ksize int, molecule string, ignore_abundance bool) = {

    // sourmash expects signatures to be named .sig
    val renamed = [(strings.FromInt(i)+".sig", f) | (i, f) <- zip(range(0, len(signatures)), signatures)]
    val d = dirs.Make(map(renamed))

    val abundance_flag =  if ignore_abundance { "--ignore-abundance" } else { "" }

	exec(image := kmer_hashing, mem := 32*GiB, cpu := 4) (csv file) {"
        ls -lha {{d}}
		/opt/conda/bin/sourmash compare \
            {{abundance_flag}} \
            --ksize {{ksize}} \
            --{{molecule}} \
            --csv {{csv}} \
            --traverse-directory \
            {{d}}
    "}
}


sigs_files := if signatures_files != "empty" {
  sigs := strings.Split(signatures_files, "|")
  v := trace(sigs)
  sigs_files := [file(sig) | sig <- sigs]
  sigs_files
} else {
  if signatures_dir != "empty" {
    dirs.Files(dir(signatures_dir))
  } else {
    panic("one of signatures_dir or signatures_files has to be specified")
  }
}


val comparison = Compare(sigs_files, ksize, molecule, ignore_abundance)

val Main = files.Copy(comparison, output)
