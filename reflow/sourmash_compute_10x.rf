param (
    // S3 path to 10x folder
    tenx string

    // Full s3 file location to put the sourmash signature
    output string

    // Size of kmer(s) to use
    ksizes = "21,33,51"

    // Number of kmer hashes to use
    num_hashes = 1000

    // Calculate protein signature
    protein = true

    // Calculate DNA signature
    dna = true

    // Number of processes
    processes = 8

    // Name of the bam file in the tenx folder
    BAM_FILENAME := "possorted_genome_bam.bam"

    // Name of the single-column barcodes file in the tenx folder
    BARCODES = "barcodes.tsv"
)

// Instantiate the system modules "files" (system modules begin
// with $), assigning its instance to the "files" identifier. To
// view the documentation for this module, run "reflow doc
// $/files".
val files = make("$/files")
val dirs = make("$/dirs")




val kmer_hashing = "czbiohub/kmer-hashing"


val protein_flag = if protein { "--protein" } else { "--no-protein" }
val dna_flag = if dna { "--dna" } else { "--no-dna" }


// Compute a minhash signature for a sample
@requires(cpu := processes, disk := GiB)
func Compute(tenx dir, ksizes string) = {

    // val (bam, _) = dirs.Pick(tenx, "*.bam")
    // val memory = 2*len(bam)
    // v := trace(memory)
    // u := trace(tenx)


	exec(image := kmer_hashing, mem := 32*GiB) (signature file) {"
		/opt/conda/bin/sourmash compute \
            {{protein_flag}} \
            {{dna_flag}} \
            --input-is-10x \
            --processes {{processes}} \
            --num-hashes {{num_hashes}} \
            --ksizes {{ksizes}} \
            --output {{signature}} \
            {{tenx}}
    "}
}


// Instantiate Go system module "strings"
val strings = make("$/strings")

val tenx_folder = dir(tenx)
val (bam, _) = dirs.Pick(tenx_folder, "*.bam")
val (bai, _) = dirs.Pick(tenx_folder, "*.bai")
val (barcodes, _) = dirs.Pick(tenx_folder, BARCODES)

val renamed = map([(BAM_FILENAME, bam), 
    (BAM_FILENAME + ".bai", bai), 
    (BARCODES, barcodes)])
val minimal_tenx_dir = dirs.Make(renamed)

val signature = Compute(minimal_tenx_dir, ksizes)

val Main = files.Copy(signature, output)
