param (
    // S3 path to 10x folder
    tenx string

    // Full s3 file location to put the sourmash signature
    output string

    // Size of kmer(s) to use
    ksizes = "21,33,51"

    // choose number of hashes as 1/scaled of input k-mers
    scaled = 0

    // Number of kmer hashes to use
    num_hashes = 1000

    // Calculate protein signature
    protein = true

    // Calculate DNA signature
    dna = true

    // Number of processes
    processes = 8

    // Name of the bam file in the tenx folder
    BAM_FILENAME = "possorted_genome_bam.bam"

    // Name of the single-column barcodes file in the tenx folder
    BARCODES = "barcodes.tsv"
)

// Instantiate the system modules "files" (system modules begin
// with $), assigning its instance to the "files" identifier. To
// view the documentation for this module, run "reflow doc
// $/files".
val files = make("$/files")
val dirs = make("$/dirs")


sourmash := make("./sourmash.rf")


// bam2fastx Docker image
val bam2fastx = "czbiohub/bam2fastx"


// Compute a minhash signature for a sample
@requires(cpu := 4, mem := 16*GiB, disk := 4*GiB)
func TenXBamToFasta(tenx dir) = {
    outdir := exec(image := bam2fastx) (output dir) {"
            bam2fastx fasta {{tenx}} --all-cells-in-one-file --output {{output}}
    "}

    val (fasta, _) = dirs.Pick(outdir, "*.fasta")

    // Return single fasta
    fasta
}



// Instantiate Go system module "strings"
val strings = make("$/strings")



@requires(cpu := 1, mem := 16*GiB)
val Main = {

    // Add a final slash if there wasn't one
    tenx := if strings.HasSuffix(tenx, "/") {
        tenx
        } else {
            tenx + "/"
        }

    bam := file(tenx + BAM_FILENAME)
    bai := file(tenx + BAM_FILENAME + ".bai")
    barcodes := file(tenx + BARCODES)

    val renamed = map([(BAM_FILENAME, bam), 
        (BAM_FILENAME + ".bai", bai), 
        (BARCODES, barcodes)])
    val minimal_tenx_dir = dirs.Make(renamed)

    fasta := TenXBamToFasta(minimal_tenx_dir)
    reads := [fasta]

    singleton := false

    sourmash_sketch := sourmash.Compute(reads, scaled, ksizes, protein, 
        dna, singleton)
    files.Copy(sourmash_sketch, output)
}
